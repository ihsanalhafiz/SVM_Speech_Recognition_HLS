-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity svm_speech_30_svm_speech_30_Pipeline_9_dv8_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 64; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 32
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of svm_speech_30_svm_speech_30_Pipeline_9_dv8_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011111111010000011000010101010111101110011001000001000101111110", 1 => "0011111111100111011110110100110001101010011000100110000001110001", 2 => "1011111111100000111001000010101100001000010110101001010100010101", 3 => "1011111111110100000011001111101011001010011100010110101001110011", 
    4 => "1011111111101110001010000001101110011010111000111101011110101011", 5 => "1011111111010110001101001000111001000011000110101001010101010110", 6 => "1011111111100001101101011110100100000000100101110000100001001001", 7 => "1011111111010001011110101101100100110110111011101101111000001111", 
    8 => "0011111110110100100011110011101001111000010101110111101111001110", 9 => "1011111110001011001011001110000010100000111000101111101101101111", 10 => "1011111110110000001111101101000101111001100000101100010110101010", 11 => "0011111110101011011111011011001001110101100001110100111000100101", 
    12 => "0011111111001000101011101010100001001011011110100010110001000001", 13 => "0011111111010000111010010010101011010000011111010101101011110110", 14 => "0011111111001001001001010001110100111000000011001001010011111101", 15 => "0011111110111111111010111000000111101101011100001001111111010111", 
    16 => "0011111110110101010110101010100001000110101100110000010001110001", 17 => "0011111110100101100011110100010101101000001001111011111100010101", 18 => "0011111101111011000111110011001011000111011111010110011100011100", 19 => "0011111110100001000110101100111001111010001111001011011000110111", 
    20 => "0011111110011101001110011000111100000110100110010001010000000011", 21 => "0011111110011100101011110001001001001111111001000100001010011011", 22 => "0011111110011110110000111001001111100001001110100010000101111100", 23 => "0011111110011010011111000100111001100100011000011001001000010001", 
    24 => "0011111101101001010011100100100100010101111011011100001010011100", 25 => "0011111101111010001111011110000011110110001100100011111001110000", 26 => "0011111110010010110001010010100100100110000001001001110010000111", 27 => "0011111110010000011011000110011111101000100111001101010001101001", 
    28 => "0011111110010101010011000101100110110111000000011101011000011001", 29 => "0011111110011001100001111011011011010101111010100000100011101111", 30 => "0011111110011111010100100001111000111111011010110111000110011100", 31 => "0011111110100010000111000010100010101011011011000000110001100000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity svm_speech_30_svm_speech_30_Pipeline_5_dv4_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 64; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 32
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of svm_speech_30_svm_speech_30_Pipeline_5_dv4_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0011111111001010100011001101001100010000100000101110111111010001", 1 => "0011111110010111010010001010111001000001110110111110100011111100", 2 => "1011111110010100100001000000011101101001101001100010001100011111", 3 => "1011111111000000110000101111000111110110001100011010010101101000", 
    4 => "0011111110110001011100011100111000110011010110100101011110001010", 5 => "0011111111100001101110100001100100011001011001101110001000011000", 6 => "0011111111010001111001001010111111011001001111110111110111001110", 7 => "0011111110111011010100110101000111011111100100101111100101011001", 
    8 => "1011111111110001101110110100111011111011000110101010010000000101", 9 => "1011111111101001001001101101000111110111101110100010000100011010", 10 => "1011111111011011111011000011001111101011000100100000100101100101", 11 => "1011111111101010001110010001101010101010000100000001000110101000", 
    12 => "1011111111110001001101111110100000001001011001110010110111000000", 13 => "1011111111101100111010001011111110111101101101111010000110100101", 14 => "1011111111011010100011000110101001001111101010101001101001010001", 15 => "1011111110110111110100100010101010100110011000100001001111010010", 
    16 => "1011111110101100101011010100100010100110110110100100010001010011", 17 => "0011111111001110000110110111110111100100000000110110100001111111", 18 => "0011111111000110000010100011100100010111111111000111010000110101", 19 => "1011111111000101010010001111000111001010001111101001101011110110", 
    20 => "1011111111010010111000000101110101101110100001011011111111101100", 21 => "1011111111001110111000100010110010110001011011001011111100110000", 22 => "1011111110111011110001111001010000101111101101001110101001000101", 23 => "1011111110100111100001011011011100000011000011010001111101000100", 
    24 => "1011111110010001100100100110100100101110100110011011110001001000", 25 => "1011111110101110000101101011111110011001000011111101011101001110", 26 => "1011111110010010111001010100101011110010000111111101000101000011", 27 => "0011111110000011100101011101110100110111001100001111100101100000", 
    28 => "1011111110110100000101000001010011100110110011110001100100000101", 29 => "1011111111000000110010100110010111011011010010010100110001110011", 30 => "1011111111000000101111010010100101011100011111111001101101110010", 31 => "1011111111000000001101000111111010100000001100111101000110010001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity svm_speech_30_svm_speech_30_Pipeline_10_dv9_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 64; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 32
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of svm_speech_30_svm_speech_30_Pipeline_10_dv9_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011111110110110110010110000011110001010101111010111111011111000", 1 => "0011111111101001111010011110100010011100100110010111011101010101", 2 => "0011111111111110101100111100101110001011010001111100001001110111", 3 => "1011111111010100101111001011001110001101101001111101010111111101", 
    4 => "1011111111000010101100101110101001101011100111111100001110101000", 5 => "1011111111010000010001111011100111110101010010000010001011011000", 6 => "1011111111011011011010011101101101011110111000011101111100001010", 7 => "1011111111010101001001110110010001001101110001000011110001111110", 
    8 => "1011111111001011100101010011100010100000101100010111101110100001", 9 => "1011111111000011000010000100001000010011110000101111010011000000", 10 => "1011111111000001101101010000001011000110110100101100100111111110", 11 => "1011111111000111001011110110100110001100011000100111001101111111", 
    12 => "1011111110110010111100111011011010111001001000101010000111110110", 13 => "1011111110010110101111010000011111110100101101001111011010111110", 14 => "1011111101110011101010100110110101000100110111011101010101111100", 15 => "0011111101011000010110011100001010000011111010100000001011110100", 
    16 => "1011111101111010101101100010000111111000010110101010010111001111", 17 => "1011111110010110010000000110011011011110110101111010010010011110", 18 => "1011111110100011101011000010000001000000011011111111110010100010", 19 => "1011111101101101100111010000111101100110011111101101010011001011", 
    20 => "1011111101011100110100111010001000110011110110011110111000111101", 21 => "0011111101100100010001111100111100010110100110100100000011101101", 22 => "1011111101101110101011001001111011110010010101100110111001111001", 23 => "0011111110000100101010101001011001010010001111111101110111011111", 
    24 => "1011111100111000011100010111101010011101011111100000001100101011", 25 => "1011111101100111011001000100001101011011111100100000100001000011", 26 => "0011111101000100101100001111100011110000011100111101101101101000", 27 => "0011111101100000010101111101010101111100100001100000111110110100", 
    28 => "0011111101110101001100101110010000111101101101001011101110111001", 29 => "0011111101110100101000100111110011101101001001000001011101110011", 30 => "0011111110000011001111101011110000111000111110110100101101101010", 31 => "0011111110000111011100111010010001101100110100001111000101110000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


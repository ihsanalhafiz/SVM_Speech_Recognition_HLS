-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity svm_speech_30_svm_speech_30_Pipeline_3_dv2_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 64; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 32
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of svm_speech_30_svm_speech_30_Pipeline_3_dv2_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0011111110010001011101010101000010000000010111111100010111111111", 1 => "1011111111010101000001010001111101110000000100010001001100100110", 2 => "1011111111111101011101000111101111011110000100100011111110111100", 3 => "0011111111100000110011111101110100100010110011001010011000010111", 
    4 => "1011111110011010110010001100010100100111110100001101111011011001", 5 => "0011111111011001010100001010011101010110000011111111011010001110", 6 => "0011111111010000111010110010101000010001000010110100010010010010", 7 => "0011111111011001001001011101001001110101011101000011000001011110", 
    8 => "0011111111010000011111000100110110000000110111011000011110110101", 9 => "0011111110111011001010000011011111000111001001110100011001000000", 10 => "0011111110110001111001101110100001001000111011001100010110010000", 11 => "0011111110111000111011011001100000100000001100101011100101100111", 
    12 => "0011111110111101010000100110001111101100111100000011101010111001", 13 => "0011111110101100100000100010101001011010000100011001101110101100", 14 => "0011111110000011011100110101100001110001100100011111011011100000", 15 => "1011111101100100101010110010100000001000000100100000111010110000", 
    16 => "1011111101101010010110000001110110000111000101000110000110111010", 17 => "1011111101010000101111010110000000111110000100011000100101000110", 18 => "1011111101101100111100101010011101110101111001001110000111000011", 19 => "1011111101000111001111100110001001111110110010111111110111110010", 
    20 => "0011111101110110011101100110000011100110001101011010100010001100", 21 => "1011111101101000101101100000010100101111010011011010001010100111", 22 => "0011111101010111000101011011011100011010100001111111011000100100", 23 => "1011111110010001001000010010100010001111101110101001001011000000", 
    24 => "0011111101101001110001111011111110100010101000101000101011101100", 25 => "1011111101110101010111100100100110011101111101010111101100111001", 26 => "1011111101100101000110111110100100011101000000010000001110001000", 27 => "1011111101100000011100111110101111100001101010001000111111011001", 
    28 => "1011111101100001000100011010000110100101000010001101010100110101", 29 => "1011111100011110000110110010000111110010101011000001110101011101", 30 => "1011111101110010111110001110001111001000010100110011000101101001", 31 => "1011111110000000101100111000101111111110001001010101110101110111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


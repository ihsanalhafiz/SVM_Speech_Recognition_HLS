-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity svm_speech_30_svm_speech_30_Pipeline_7_dv6_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 64; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 32
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of svm_speech_30_svm_speech_30_Pipeline_7_dv6_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011111111010001011001100101001000101101001111010010111100011001", 1 => "0011111111100100000000001001101110010101011011001000100010101010", 2 => "1011111111100110111100100101101100111011001011010011011000000010", 3 => "1011111111110011100110010110111000101000010110101001010110010101", 
    4 => "1011111111101110111000100110010101111001100001001100111000110011", 5 => "1011111111001100110011100101010101100100010110111010010011001011", 6 => "1011111111011110111011010000000001101101010110100101001000101000", 7 => "1011111111010001010001100110101100110110011001001010100010011100", 
    8 => "1011111111001000111101101110011101000011101010011001101110101010", 9 => "1011111111000100111101100000000001110101000111100000010010110011", 10 => "1011111111000101011001011001001100010001010101001001000011110011", 11 => "1011111111000011011110110101011110101110101110110111100101101110", 
    12 => "1011111110110010011001110000110110101100111010001010001010110011", 13 => "1011111110010110010111110101011000011100111001101110011111000000", 14 => "0011111110101010000010100110011100100010101011011010101111100011", 15 => "0011111110111000011111100110110010101111100100100101101100011001", 
    16 => "0011111110111110111110001110100011011111110111100100100100101011", 17 => "0011111110111001001011000001001110011000110111001111001100011000", 18 => "0011111110110001110000011100010001011100101010011110011010000000", 19 => "0011111110000010011011001011000001011111111010011011111011000110", 
    20 => "0011111101011010100010111010100000011011111010101001000011011010", 21 => "0011111110000000100000000110001000000010110111100100001110000100", 22 => "0011111110001001000100010000111101110000110000101000011001110110", 23 => "0011111110010110101101000000011100100000000001011001111011010110", 
    24 => "0011111101110110101000011100001001101010100010010011011001110011", 25 => "1011111101110011011111110011100011110001100011110101010101011010", 26 => "0011111110000101010100101110001011101110010011001110100101111100", 27 => "0011111101111010110001000100100100010011010100011011000111001010", 
    28 => "0011111110000001110100011000100010001000111011011000111100101000", 29 => "0011111110000100010100100001110101000011101110011000101110100101", 30 => "0011111110000101111001111000111101010100101001001100011010001100", 31 => "0011111110001001001110111001011101011011010011101010110100010111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


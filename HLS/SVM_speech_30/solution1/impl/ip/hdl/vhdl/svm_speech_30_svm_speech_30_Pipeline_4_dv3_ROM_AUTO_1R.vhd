-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity svm_speech_30_svm_speech_30_Pipeline_4_dv3_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 64; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 32
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of svm_speech_30_svm_speech_30_Pipeline_4_dv3_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011111111100010111010011000010110010011001011010000101001011101", 1 => "0011111111110111011110100110010110000100101000111011111100010110", 2 => "1011111111110011100001000100110010000101011011010010110010111101", 3 => "1011111111000000111101011010000011010101001011110111100111101000", 
    4 => "1011111111100111001000001010111100011010001101000010011001001001", 5 => "0011111111101001101111000111100101101011010111111001000101001010", 6 => "1011111110101000110111101101010100000011000110101110111100111110", 7 => "0011111111011000101001000001101110000111001010110101111000101001", 
    8 => "0011111111010101100110010001001010000110110010101101010110100100", 9 => "1011111110011111111111001111001110001110000000111101111100001000", 10 => "1011111111100000100111110011000111110010111000101001001100011011", 11 => "1011111111011110011100101101100111000001011100010100110100110000", 
    12 => "0011111111000111101101110000101110001101000110001110101111101000", 13 => "0011111111000000111001010011011001001101001100010010110010101101", 14 => "0011111110001111010010011111100010010111001001101110001101000010", 15 => "1011111110000110001011010110100010011111101101110000101110000010", 
    16 => "1011111110110100110100111010011110010011010100011100011100011001", 17 => "1011111110111111110111000100100000100101010101010000001010011100", 18 => "1011111111001110111111101100110110100011010001101000001101011010", 19 => "1011111110110000001001000101111011111110100101111101110011101100", 
    20 => "1011111110000001101110000010000101011011000000111010101100100000", 21 => "1011111101110000100000111000100101101001100010011000111001001000", 22 => "1011111110010011101000110001000111010110101111011111010111000101", 23 => "1011111110101000010110001101101000101100100001000001011010000001", 
    24 => "0011111110100000010100110110011001000101011101001101001111011001", 25 => "1011111110100101010101011101000110001000011111111111001001101001", 26 => "1011111110001011101100011011001011010010110010101011100111100011", 27 => "0011111110001001000000001110101101001011111000010110101111111001", 
    28 => "0011111110010100001011100001110011001000100001111001011011000101", 29 => "0011111110100111001111110011010111000100001000110101111101100000", 30 => "0011111110010110010001101110000011111110110001111110111000111010", 31 => "0011111110010101001000011001110000000110100011000011011101000111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


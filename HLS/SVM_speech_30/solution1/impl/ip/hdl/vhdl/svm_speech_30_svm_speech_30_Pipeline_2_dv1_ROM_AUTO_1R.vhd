-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity svm_speech_30_svm_speech_30_Pipeline_2_dv1_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 64; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 32
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of svm_speech_30_svm_speech_30_Pipeline_2_dv1_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011111110010101001101100001111011011010100011001011110111011000", 1 => "1011111111011001000010000111011010011111100110010111110010111101", 2 => "0011111110111010000100000011010010101111101010001001111011010001", 3 => "0100000000000000001001100100010110000011011011110111111011001011", 
    4 => "0011111111101101000001111101010011100001011101110010101010111000", 5 => "0011111111101000001000010010100000010010111000000000001101001001", 6 => "0011111111011110101111110110010100000001010001000110000101010110", 7 => "0011111111011000010111000111010110000000000101001011001011111101", 
    8 => "0011111110011001011001111010100010100111000101111110011100000000", 9 => "1011111110111000100111000011110011000101101111110010111011010111", 10 => "1011111110110000101000100011110001110010110100000111111110000101", 11 => "1011111111000010001011000001111010101011101010101001101011011011", 
    12 => "1011111111001101011011010010001011110000000101101001000101101101", 13 => "1011111111010000110100001010110001011001101011111011010001001101", 14 => "1011111111001100101100000001101000010001001101111100000001101110", 15 => "1011111111000010101011110111010100001111100111000100111010100101", 
    16 => "1011111110111010001000000011110000110100000001101000101110011011", 17 => "1011111110110100101011101110010111101100010100101111001001111110", 18 => "1011111110110100010001000101001001111111011011010111001100101011", 19 => "1011111110101011000100001101111000010111101001001101101110000011", 
    20 => "1011111110101000110110110100010010111101100011100011000010000101", 21 => "1011111110101110010111101010011110100001010100000111010001100010", 22 => "1011111110100100101010011011100100110111111100111111010000100011", 23 => "1011111110100110111001100010111101000011011111111011010100111000", 
    24 => "1011111101100011101010011010100100010001101100011110111101100111", 25 => "1011111110001001100101100111110101101111111000010111101101000110", 26 => "1011111110010101100000100000111010010111101011001110100001100110", 27 => "1011111110010010010011111111100000011101011111111101111001010101", 
    28 => "1011111110001110011010010011111001001000111110100001111100100100", 29 => "1011111110001110010011101110001101001000000101010110011001011110", 30 => "1011111110010111101110010100100001100000001010101000001001000001", 31 => "1011111110100000111110110111101110010011100110111110111110001100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


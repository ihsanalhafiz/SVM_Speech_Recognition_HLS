-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity svm_speech_30_svm_speech_30_Pipeline_1_dv_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 64; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 32
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of svm_speech_30_svm_speech_30_Pipeline_1_dv_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011111110101101110011110011001010100010001101000111100010100000", 1 => "1011111111011000100000101011010101011100000011111011110001010100", 2 => "0011111111000011001101110111010100011101000010110010110100110101", 3 => "0011111111111110101110011001101011110011000111000000001001110101", 
    4 => "0011111111101100110111000011100111010110010001111101010000101110", 5 => "0011111111100010101011000111010110101101111110000101100000010101", 6 => "0011111111011000010001100011111111101010110000100000000001101010", 7 => "0011111111010011001110010110110101000011100111111101011001000011", 
    8 => "0011111111010000110100011110111111010101111100100100011001010011", 9 => "0011111111000000100001100101111001011000111110100101010110110000", 10 => "0011111110110111101010001100100001110010010100100101011101101101", 11 => "0011111110110111001011111110110001110011001101010001101110001010", 
    12 => "0011111110111011101000001010100110010011101010010101001101000101", 13 => "0011111110101011111101110101111001001100011001110111100001101001", 14 => "1011111110101110011111100010110101100110011000001100111111010001", 15 => "1011111110111001101001100111011110001110011110110110010101011100", 
    16 => "1011111111000001100100010100100001010110101111101001110111111000", 17 => "1011111111001000110011001101000001110110001110101101011100101001", 18 => "1011111111000101110110101011110001010011100100100010000110001011", 19 => "1011111110100110011101011011111110011001110010010010011111100001", 
    20 => "1011111101110011110110111000101000000010001111101010100100011011", 21 => "1011111110001100000010110111111010110101100001101101000010011000", 22 => "1011111110010000001011100100001100001100110000111110001101000001", 23 => "1011111110100011000000111101011001111100000000000111010111100110", 
    24 => "1011111101101010100100111011001000110000100011010000110000111111", 25 => "0011111101100101011011000010100010111011010011000101001000111100", 26 => "1011111110000100111000111100011010001111000111100101010010011101", 27 => "1011111110000001100000110101111100110111101000111000001000111000", 
    28 => "1011111110000000101010011101001001101111110010100110011111001000", 29 => "1011111101110011010101100000001010010100011111001000110100010000", 30 => "1011111110000110010000010000000000100001101100011111010000000001", 31 => "1011111110000100100011001010111010100001001000100110101000100100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

